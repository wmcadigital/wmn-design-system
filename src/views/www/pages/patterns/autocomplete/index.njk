{% extends "www/_layouts/layout-left-pane.njk" %}
{% set pageTitle = "Autocomplete" %}
{% set section="Patterns" %}
{# Imports #}
{% from "components/autocomplete/_autocomplete.njk" import wmndsAutocomplete %}
{% from "www/_partials/component-example/component-example.njk" import compExample %}

{% block content %}
{# About #}
<h2>About</h2>
{# What #}
<h3>What does it do?</h3>
<p>
  The autocomplete component is an input field that offers the user text suggestions as they type.<br/>
  This is often done by hitting an API endpoint with the users query when the user has finished typing.
</p>
<p>
  The autocomplete pattern is a combination of the <a href="/components/form-elements/" title="Input component" target="_self" class="wmnds-link">input</a> and <a href="/components/loader/" title="Loader component" target="_self" class="wmnds-link">loader</a> components.
</p>
{# When #}
<h3>When to use it?</h3>
<ul>
  <li>As a progressive enhancement to make a users journey shorter/easier when searching</li>
  <li>When you have a smaller data set/list that is quick to query</li>
  <li>When you want to ensure the user submits a relevant query/value</li>
</ul>
{# When not #}
<h3>When not to use it?</h3>
<ul>
  <li>When you have a massive set of data, instead you should have an input/search that shows results after submission.</li>
  <li>Don't use this component as if it is a search box. Autocomplete is to suggest a value to a user via it's results not act as a results page for a search.</li>
</ul>

<hr><br><br>
{# Default #}
<h2>Default</h2>
<p>In its default state, the autcomplete component is made up of a text input with a search icon.</p>
<p>For best practice, ensure that the placeholder and aria-label describes what the autocompletes intended purpose is.</p>
<p>Notice that there is also a <code class="wmnds-website-inline-code">wmnds-loader</code> component nested within the autocomplete, more on that in the next section.</p>
{{
  compExample([
    wmndsAutocomplete({
      query: ''
    })
  ]) | trim
}}


<br><br>
{# Loading #}
<h2>Loading</h2>
<p>
  When a user types in a query, you may want to have some code that hits an API or gets the data/suggestions for the autocomplete from somewhere. To help users understand that they need to wait for something we can change the autocomplete to a loading state.
  We do this by adding the class <code class="wmnds-website-inline-code">wmnds--is-loading</code> to the top level of the autocomplete (this is the only difference between the loading state and default state code snippets).
</p>
<p>As mentioned in the previous section, there is  a <code class="wmnds-website-inline-code">wmnds-loader</code> component nested in the autocomplete.<br/> When adding the <code class="wmnds-website-inline-code">wmnds--is-loading</code> class, it will hide the search icon and show the loading spinner in it's place.</p>
<p>Below is an example of how the autocomplete looks when a user has typed in 'My query' and is waiting for autocomplete suggestions to load.

<p><strong>It is good practice to:</strong></p>
<ul>
  <li>Show loading state when waiting for data to load</li>
  <li>Let the user finish typing before you fetch autocomplete suggestions (add a debounce)</li>
  <li>Add the wmnds-is--loading class as soon as you are fetching data</li>
</ul>
{{
  compExample([
    wmndsAutocomplete({
      query: 'My query',
      loading: true
    })
  ]) | trim
}}


<br><br>
{# Results #}
<h2>Results</h2>
<h3>Default (text)</h3>
{{
  compExample([
    wmndsAutocomplete({
      showResults: true,
      textResults: true,
      query: 'My query'
    })
  ]) | trim
}}

{# With disruption indicator #}
<h3>With disruption indicator</h3>
{{
  compExample([
    wmndsAutocomplete({
      showResults: true,
      query: 'x15'
    })
  ]) | trim
}}

{% endblock %}
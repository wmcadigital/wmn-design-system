// sass-lint:disable no-debug

// When setting the primary font stack, apply it to the Pure grid units along
// with `html`, `button`, `input`, `select`, and `textarea`. Pure Grids use
// specific font stacks to ensure the greatest OS/browser compatibility.
html,
button,
input,
select,
textarea,
.wmnds-grid [class*="wmnds-col"] {
  font-family: $x-font-family;
  -webkit-font-smoothing: antialiased;
}

.wmnds-grid {
  display: flex;
  width: 100%;
  letter-spacing: -0.31em;
  text-rendering: optimizespeed;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  -webkit-flex-flow: row wrap;
  -ms-flex-flow: row wrap;
  flex-flow: row wrap;
  -webkit-align-content: flex-start;
  -ms-flex-line-pack: start;
  align-content: flex-start;

  [class*="wmnds-col"] {
    display: inline-block;
    zoom: 1;
    letter-spacing: normal;
    word-spacing: normal;
    text-rendering: auto;
    vertical-align: top;
  }
}

.wmnds-col-auto {
  width: auto;
}

// Create grid cols
$cols: 1 2 3 4 5 6 12 24;
$col-list: create-col-list($cols);
$breakpoint-map: (
  "sm": 35.5,
  "md": 48,
  "lg": 64,
  "xl": 80
);

// @debug $col-list;

// Standard
@each $group in $col-list {
  $selector: create-selector(map-get($group, "suffixes"), ".wmnds-col-");
  $width: map-get($group, "width");

  #{$selector} {
    width: $width;
  }
}

// Responsive
//
// Loop through grid breakpoints
@each $bp-name, $bp-value in $breakpoint-map {
  @media screen and (min-width: #{$bp-value}em) {
    // Create the grid classes with the breakpoints
    @each $group in $col-list {
      $selector: create-selector(map-get($group, "suffixes"), ".wmnds-col-#{$bp-name}-");
      $width: map-get($group, "width");

      #{$selector} {
        width: $width;
      }
    }
  }
}

// Grid spacing
$max-cols: 4;
$spacing-map: (
  "xs": $size-xs,
  "xsm": $size-xs,
  "sm": $size-xs,
  "md": $size-xs,
  "lg": $size-xs,
  "xl": $size-xl
);

@each $sp-name, $sp-value in $spacing-map {
  @for $i from 2 through 4 {
    .wmnds-grid--spacing-#{$i}-#{$sp-name} {
      > [class*="wmnds-col"] {
        padding-right: $sp-value;
        padding-left: $sp-value;

        &:nth-child(#{$i}n) {
          padding-right: 0;
        }

        &:nth-child(#{$i}n-#{$i - 1}) {
          padding-left: 0;
        }
      }
    }
  }
}

// Responsive
@each $bp-name, $bp-value in $breakpoint-map {
  @media screen and (min-width: #{$bp-value}em) {
    @each $sp-name, $sp-value in $spacing-map {
      @for $i from 2 through 4 {
        .wmnds-grid--spacing-#{$bp-name}-#{$i}-#{$sp-name} {
          > [class*="wmnds-col"]:nth-child(n) {
            padding-right: $sp-value;
            padding-left: $sp-value;
          }

          > [class*="wmnds-col"] {
            &:nth-child(#{$i}n) {
              padding-right: 0;
            }

            &:nth-child(#{$i}n-#{$i - 1}) {
              padding-left: 0;
            }
          }
        }
      }
    }
  }
}

// FUNCTIONS USED TO CREATE GRID + GRID HELPERS

//
// HELPER FUNCTIONS
//

// divide-tuple() notes
// Takes a tuple (list of numbers of length 2)
// and then divides the first item by the second.
@function divide-tuple($fraction-tuple) {
  @return nth($fraction-tuple, 1) / nth($fraction-tuple, 2);
}

// create-selector() notes
//
// Takes a prefix e.g. "wmnds-col-" and a list of suffixes
// It applies each of the suffixes to the prefix and then returns a comma-separated
// selector for all the suffixes
@function create-selector($selector-prefix, $col-suffix-list) {
  $result: "";

  @for $i from 1 through length($col-suffix-list) {
    $result: $result + $selector-prefix + nth($col-suffix-list, $i);
    $result: if($i == length($col-suffix-list), $result + "", $result + ", ");
  }

  @return $result;
}

//
// TUPLE SORTING
//

// compare() notes
//
// Takes two tuples (number lists of length 2)
// returns True if the fraction of B > fraction of tuple B
// If the fraction is equal it returns True if the denominator
// of fraction A is smaller than that of fraction B
@function compare($tuple-a, $tuple-b) {
  @if divide-tuple($tuple-a) != divide-tuple($tuple-b) {
    @return divide-tuple($tuple-a) < divide-tuple($tuple-b);
  } @else {
    @return nth($tuple-a, 2) < nth($tuple-b, 2);
  }
}

// swap() notes
//
// Takes a list and two indexes
// Returns a list with the two values at the indexes switched
@function swap($list, $index-a, $index-b) {
  $temp: nth($list, $index-a);
  $list: set-nth($list, $index-a, nth($list, $index-b));
  $list: set-nth($list, $index-b, $temp);
  @return $list;
}

// sort-by-tuple-fraction()
//
// Takes a list of tuples (list of numbers of length 2) and
// sorts from the smallest tuple fraction to the greatest tuple fraction.
// return the sorted list
@function sort-by-fraction($list) {
  @for $i from 1 through length($list) {
    @for $j from $i * -1 through -1 {
      $j: abs($j);
      @if $j > 1 and compare(nth($list, $j), nth($list, $j - 1)) {
        $list: swap($list, $j, $j - 1);
      }
    }
  }
  @return $list;
}

//
// TUPLE MANIPULATION
//

// create-all-tuples()
//
// Takes a list of numbers and creates a list of all possible
// tuples (list of numbers of length 2) from 1 to each number of the list
@function create-all-tuples($number-list) {
  $result: ();
  @each $number in $number-list {
    @for $i from 1 through $number {
      $result: append($result, ([$i $number]));
    }
  }

  @return $result;
}

// group-by-fraction() notes
//
// takes a list of tuples (list of numbers of length 2) and creates
// sublists by tuples with equal fractions
// returns a list of sublists of grouped tuples
@function group-by-fraction($tuple-list) {
  $result: ();
  $temp: [];

  @for $i from 1 through length($tuple-list) {
    @if $i == 1 or divide-tuple(nth($tuple-list, $i)) == divide-tuple(nth($tuple-list, $i - 1)) {
      $temp: append($temp, nth($tuple-list, $i));
    } @else if divide-tuple(nth($tuple-list, $i)) != divide-tuple(nth($tuple-list, $i - 1)) {
      $result: append($result, $temp);
      $temp: [nth($tuple-list, $i) ];
    }

    @if $i == length($tuple-list) {
      $result: append($result, ($temp));
    }
  }

  @return $result;
}

// map-to-suffix-width() notes
//
// Takes a list of sublists of tuples (list of numbers of length 2)
// and maps each sublist to a sass map with css width and a list of suffixes
// returns a list of maps
@function map-to-suffix-width($tuple-list) {
  $result: ();
  @each $group in $tuple-list {
    $width: divide-tuple(nth($group, 1)) * 100%;
    $suffixes: [];

    @each $tuple in $group {
      $suffixes: append($suffixes, "#{nth($tuple, 1)}-#{nth($tuple, 2)}");
    }

    // Add extra "1" suffix, for wmnds-col-1
    // sass-lint:disable-block space-around-operator
    @if $width == 100% {
      $suffixes: append($suffixes, "1");
    }

    $result: append(
      $result,
      (
        "width": $width,
        "suffixes": $suffixes
      )
    );
  }

  // Add auto suffix & width for wmnds-col-auto
  $result: append(
    $result,
    (
      "width": "auto",
      "suffixes": [ "auto" ]
    )
  );

  @return $result;
}

// create-col-list()
//
// Takes a list of numbers
// returns a list of maps of all possible fractions as strings e.g 1-2
// with their respective css widths grouped by width
@function create-col-list($number-list) {
  // Create list of all possible combinations from 1-n of all numbers in $number-list
  $unsorted-tuples: create-all-tuples($number-list);

  // Sort the l;st by increasing fraction value
  $sorted-tuples: sort-by-fraction($unsorted-tuples);

  // Group equal tuples
  $grouped-tuples: group-by-fraction($sorted-tuples);

  // Create map with
  $suffix-width-maps: map-to-suffix-width($grouped-tuples);
  @return $suffix-width-maps;
}

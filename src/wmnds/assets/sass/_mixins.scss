// TYPE
// This is to get the size of the font to be used,
// and to scale the line heights based on the font size
@mixin type-setting($level, $multiplier: 1) {
  // $mulitplier var gives the option to multiply(scale) the values below. This is often used to scale the headers depending on device size

  // Default (16px)
  @if $level == 0 {
    font-size: 1rem;
    line-height: 1.5rem;
  }
  // Heading 1 (46px)
  @if $level == 1 {
    margin-top: 1.5rem * $multiplier;
    margin-bottom: 3rem * $multiplier;
    font-size: 2.875rem * $multiplier;
    line-height: 3rem * $multiplier;
  }
  // Heading 2 (32px)
  @if $level == 2 {
    margin-top: 1.5rem * $multiplier;
    margin-bottom: 1.5rem * $multiplier;
    font-size: 2rem * $multiplier;
    line-height: 3rem * $multiplier;
  }
  // Heading 3 (23px)
  @if $level == 3 {
    margin-top: 1.5rem * $multiplier;
    margin-bottom: 1.5rem * $multiplier;
    font-size: 1.4375rem * $multiplier;
    line-height: 1.5rem * $multiplier;
  }
  // Heading 4 (18px)
  @if $level == 4 {
    margin-top: 1.5rem * $multiplier;
    margin-bottom: 0.75rem * $multiplier;
    font-size: 1.125rem * $multiplier;
    line-height: 1.5rem * $multiplier;
  }
}

// get-color() notes
//
// This is to get one of the brand colors in the $palettes map in vars.scss
// Use it like so... get-color(primary);
// If you'd like to get a tint of a color, use it like so...
// get-color(primary, 50); by default it mixes with white
// If you add dark to the end it will mix black instead of white
// e.g. get-color(primary, 50, dark);
@function get-color($color, $percent: 0, $shade: $white) {
  // If shade is null, then by default set to white else set to shade selected
  $shade: if($shade == dark, $black, $white);
  $color: map-get($palettes, $color);

  @return mix($shade, $color, $percent);
}

// Create a list of lists for columns
//
@function divide-tuple($fraction-tuple) {
  @return nth($fraction-tuple, 1) / nth($fraction-tuple, 2);
}

// Sorting algo
@function compare($tuple-a, $tuple-b) {
  @if divide-tuple($tuple-a) != divide-tuple($tuple-b) {
    @return divide-tuple($tuple-a) < divide-tuple($tuple-b);
  } @else {
    @return nth($tuple-a, 2) < nth($tuple-b, 2);
  }
}

@function swap($list, $index-a, $index-b) {
  $temp: nth($list, $index-a);
  $list: set-nth($list, $index-a, nth($list, $index-b));
  $list: set-nth($list, $index-b, $temp);
  @return $list;
}

@function sort($list) {
  @for $i from 1 through length($list) {
    @for $j from $i * -1 through -1 {
      $j: abs($j);
      @if $j > 1 and compare(nth($list, $j), nth($list, $j - 1)) {
        $list: swap($list, $j, $j - 1);
      }
    }
  }
  @return $list;
}

@function group-by-decimal($tuple-list) {
  $result: ();
  $temp: [];

  @for $i from 1 through length($tuple-list) {
    @if $i == 1 or divide-tuple(nth($tuple-list, $i)) == divide-tuple(nth($tuple-list, $i - 1)) {
      $temp: append($temp, nth($tuple-list, $i));
    } @else if divide-tuple(nth($tuple-list, $i)) != divide-tuple(nth($tuple-list, $i - 1)) {
      $result: append($result, $temp);
      $temp: [nth($tuple-list, $i) ];
    }

    @if $i == length($tuple-list) {
      $result: append($result, ($temp));
    }
  }

  @return $result;
}

@function create-col-list($number-list) {
  // Create list of all possible combinations from 1-n of all numbers in number-list
  $unsorted-tuples: ();
  @each $number in $number-list {
    @for $i from 1 through $number {
      $unsorted-tuples: append($unsorted-tuples, ([$i $number]));
    }
  }

  // Sort the l;st by increasing fraction value
  $sorted-tuples: sort($unsorted-tuples);

  // Combine equal tuples
  @return group-by-decimal($sorted-tuples);
}
